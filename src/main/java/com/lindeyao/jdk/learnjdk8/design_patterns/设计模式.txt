设计模式可以分成三类：
1：创建型模式：
    1.1：静态工厂模式(简单工厂模式)
    1.2：工厂方法模式(只生产一个等级结构的产品)
    1.3：抽象工厂模式(可以生产两个及以上产品等级结构的产品族)
    1.4：建造者模式
    1.5：单例模式
工厂模式中的产品等级结构概念：同一种产品就属于同一个产品等级结构，举例：
电视机就属于一种产品，那么长虹电视机跟小米电视机，就属于同一种产品等级结构
电冰箱是另外一种产品，那么相对于小米电视机跟海尔电冰箱来说，就属于不同产品等级结构。

静态工厂、工厂方法模式、抽象工厂模式的各自区别？
1：静态工厂：只有一个实体工厂类，提供了根据不同类型返回不同产品的对象，本身负责了不同产品类型的逻辑判断。不符合
           开闭原则，如果加上新的类型，需要修改工厂类。同时，如果类型比较多，工厂的逻辑判断会变得混乱。
2：工厂方法模式：
    2.1：抽象工厂类只定义返回的抽象产品，不做逻辑判断，也不创建对象。
    2.2：实体工厂，实现了抽象工厂的方法。同时，肩负着具体产品对象的创建工作。如果产品有多个类型，需要创建对应类型的工厂。
         两者一一对应。
    2.3：抽象产品
    2.4：具体产品
3：抽象工厂模式：与工厂方法模式相比，抽象工厂模式定义了一组产品族，可以认为工厂方法模式是特殊的抽象工厂模式，
只负责一种产品类型的创建工作。
    3.1：抽象工厂类定义了返回多个产品族(不同产品等级结构)的方法。

4：建造者模式：
一个复杂的对象是由多个组成(子对象)部件组成，比如，一辆汽车是由方向盘、轮胎、发动机等组成。而使用者
仅仅使用的是组成后的对象，不会单独使用子对象。同时，对于组成部分是如何组装的，包括组装的先后顺序，部件选择，对使用者
来说都是透明的。
复杂对象就相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件。建造产品对象的过程，就相当于组合部件的过程。
由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里。建造者返回给客户端的
是一个已经建造完毕的完整产品对象，而用户无需关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的动机。
定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
