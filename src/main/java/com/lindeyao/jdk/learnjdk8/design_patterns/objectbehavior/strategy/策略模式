策略模式：(个人理解，分三个角色如下)
1：针对一组算法(或者叫行为)，因为行为相同或者相似，那么就可以抽象出方法出来(编写抽象接口或者抽象类，并把相同的行为抽象成方法)--策略接口或者抽象类。
2：对于每一种算法(行为)，编写成一个具体算法类(需要实现上面抽象的策略接口)--具体策略行为类
3：对于使用场景来说，客户端根据自身的需求，选择恰当的具体策略行为类(也就是说客户端需要清楚所有的策略行为，才能更好的选择具体的策略行为类)。
所以具体客户端，需要持有策略接口的一个对象实例，才能进行算法(行为)调用--场景类

官方定义：
针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式属于对象的行为模式，使得算法可以在不影响到客户端的情况下发生变化。


策略模式非常简单，使用比较广泛。
参考链接：https://www.cnblogs.com/java-my-life/archive/2012/05/10/2491891.html
